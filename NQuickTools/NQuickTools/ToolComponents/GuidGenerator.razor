<div>
    @GetGuidDisplay1()
    <br />
    @GetGuidDisplay2()
</div>

<div>
    <button @onclick="() => currentGuid = Guid.NewGuid()">New GUID</button>
</div>

<div>
    <fieldset>
        <legend>
            Mode
        </legend>
        <InputRadioGroup @bind-Value="formatString">
            <InputRadio Value="@("N")" id="radioN" /><label for="radioN">N</label>
            <InputRadio Value="@("D")" id="radioD" /><label for="radioD">D</label>
            <InputRadio Value="@("B")" id="radioB" /><label for="radioB">B</label>
            <InputRadio Value="@("P")" id="radioP" /><label for="radioP">P</label>
            <InputRadio Value="@("X")" id="radioX" /><label for="radioX">X</label>
            <InputRadio Value="@("bytes")" id="radioBytes" /><label for="radioBytes">bytes</label>
        </InputRadioGroup>
    </fieldset>
</div>

<hr />

<div>
    Implementation Details:
    <ul>
        <li>
            GUIDs are generated by
            <a href="https://learn.microsoft.com/zh-cn/dotnet/api/system.guid.newguid?view=net-7.0" target="_blank">System.Guid.NewGuid()</a>.
        </li>
        <li>
            In bytes mode, order of the bytes is different from the string representation. See
            <a href="https://learn.microsoft.com/en-us/dotnet/api/system.guid.tobytearray?view=net-7.0" target="_blank">System.Guid.ToByteArray()</a>
            for more. (And the second line is just the base64 string of the first line.)
        </li>
    </ul>
</div>

@code
{
    private string formatString = "D";
    private Guid currentGuid = Guid.NewGuid();

    private string GetGuidDisplay1()
    {
        if (formatString == "bytes")
        {
            return currentGuid.ToByteArray().ArrayToString();
        }
        return currentGuid.ToString(formatString);
    }

    private string GetGuidDisplay2()
    {
        if (formatString == "bytes")
        {
            return currentGuid.ToByteArray().ToBase64();
        }
        return currentGuid.ToString(formatString).ToUpperInvariant();
    }
}